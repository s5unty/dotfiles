source $HOME/.zsh/colour

parse_git_branch() {
    branch="$(git branch --no-color 2> /dev/null | \
        sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"

    git diff --no-ext-diff --ignore-submodules=dirty --quiet 2> /dev/null
    flag=$?
    if [ $flag -eq 1 ]; then # head is not clear
        _branch="${at_underl}${branch}"
    elif [ $flag -eq 0 ]; then # head is clear
        git diff --cached --no-ext-diff --ignore-submodules=all --quiet 2> /dev/null
        cflag=$?
        if [ $cflag -eq 0 ]; then # cache is clear
            _branch="${branch}"
        else # cache is not clear
            _branch="${at_bold}${branch}"
        fi
    else # there is not git repository == 129
        _branch=""
    fi

    stash="$(git stash list 2> /dev/null | \
        grep -q "${branch}")"
    if [ $? -eq 0 ]; then # branch has stash
        _stash=" ${at_reverse}"
    elif [ -z ${_branch} ]; then
        _stash=""
    else
        _stash=" "
    fi

    echo "${_stash}${_branch}"
}

precmd() {
    MAXMID="$(($COLUMNS / 2 - 5))" # truncate to this value
    myjobs=()
    for a (${(k)jobstates}) {
        j=$jobstates[$a];i="${${(@s,:,)j}[2]}"
        myjobs+=($a${i//[^+-]/})
    }
    myjobs="$fg_cyan%(1j/[${(j/,/)myjobs}] /)$fg_green"
    myenvs="$fg_yellow$CONDA_PROMPT_MODIFIER"
    mypath="$fg_green$at_italic%~$at_none"
    myerrs="$fg_lred%(0?.. (%?%))$at_none"
    mygitb="$(parse_git_branch)$at_none"
    RPS1="$myenvs$myjobs%$MAXMID<...<$mypath$myerrs$mygitb$at_none"
    PS1="$at_bold%!%#$at_none "
    print -Pn "\a"
}

preexec () {
    # if [[ $TTY =~ "pts" ]]; then ## zsh-4.2.0 不支持这种表达式
    if [[ ${(@)${(s#/#)TTY}[2]} == "pts" ]]; then
        # 当前执行的命令输出到终端标题栏
        print -Pn '\e]0;%# $1 (%1~) - %l\a'
    fi
    # 随机使用一种颜色高亮 grep 内容
    export GREP_COLOR="01;48;5;$[$RANDOM%255]"
}

## 测试用：提示符显示成两行 {{{1
## @ref: http://jarod.wikidot.com/zsh-configuration
## function precmd {
##
##     local TERMWIDTH
##     (( TERMWIDTH = ${COLUMNS} - 1 ))
##
##     ###
##     # Truncate the path if it's too long.
##
##     PR_FILLBAR=""
##     PR_PWDLEN=""
##
##     local promptsize=${#${(%):---(%n@%m:%d)----}}
##     local pwdsize=${#${(%):-}}
##
##     if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
##         ((PR_PWDLEN=$TERMWIDTH - $promptsize))
##     else
##     PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
##     fi
##
##     ###
##     # Get APM info.
##
##     if which ibam > /dev/null; then
##     PR_APM_RESULT=`ibam --percentbattery`
##     elif which apm > /dev/null; then
##     PR_APM_RESULT=`apm`
##     fi
## }
##
## setopt extended_glob
## preexec () {
##     if [[ "$TERM" == "screen" ]]; then
##     local CMD=${1[(wr)^(*=*|sudo|-*)]}
##     echo -n "\ek$CMD\e\\"
##     fi
## }
##
## setprompt () {
##     ###
##     # Need this so the prompt will work.
##
##     setopt prompt_subst
##
##     ###
##     # See if we can use colors.
##
##     autoload colors zsh/terminfo
##     if [[ "$terminfo[colors]" -ge 8 ]]; then
##     colors
##     fi
##     for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
##     eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
##     eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
##     (( count = $count + 1 ))
##     done
##     PR_NO_COLOUR="%{$terminfo[sgr0]%}"
##
##     ###
##     # See if we can use extended characters to look nicer.
##
##     typeset -A altchar
##     set -A altchar ${(s..)terminfo[acsc]}
##     PR_SET_CHARSET="%{$terminfo[enacs]%}"
##     PR_SHIFT_IN="%{$terminfo[smacs]%}"
##     PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
##     PR_HBAR=${altchar[q]:--}
##     PR_ULCORNER=${altchar[l]:--}
##     PR_LLCORNER=${altchar[m]:--}
##     PR_LRCORNER=${altchar[j]:--}
##     PR_URCORNER=${altchar[k]:--}
##
##     ###
##     # Decide if we need to set titlebar text.
##
##     case $TERM in
##     xterm*)
##         PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
##         ;;
##     screen)
##         PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
##         ;;
##     *)
##         PR_TITLEBAR=''
##         ;;
##     esac
##
##     ###
##     # Decide whether to set a screen title
##     if [[ "$TERM" == "screen" ]]; then
##         PR_STITLE=$'%{\ekzsh\e\\%}'
##     else
##         PR_STITLE=''
##     fi
##
##     ###
##     # APM detection
##
##     if which ibam > /dev/null; then
##         PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
##     elif which apm > /dev/null; then
##         PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
##     else
##         PR_APM=''
##     fi
##
##     ###
##     # Finally, the prompt.
##
##     PS1='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
## $PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
## $PR_GREEN%(!.%SROOT%s.%n)$PR_BLUE@$PR_GREEN%m$PR_BLUE:$PR_MAGENTA%d\
## $PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}\
## $PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\
##
## $PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
## %(?,$PR_LIGHT_GREEN%?,$PR_RED%?)\
## ${(e)PR_APM}\
## $PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
## $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
## $PR_NO_COLOUR '
##
##     RPS1=' $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'
##
##     PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
## $PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
## $PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
## $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
## }
##
## setprompt
##}}}1

# vim: ft=zsh et
